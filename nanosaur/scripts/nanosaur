#!/bin/bash
# Copyright (C) 2021, Raffaello Bonghi <raffaello@rnext.it>
# All rights reserved
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 1. Redistributions of source code must retain the above copyright 
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. Neither the name of the copyright holder nor the names of its 
#    contributors may be used to endorse or promote products derived 
#    from this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND 
# CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, 
# BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS 
# FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
# HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, 
# SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
# PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; 
# OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, 
# WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE 
# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, 
# EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

NANOSAUR_DATA='/opt/nanosaur'
DEFAULT_DISTRO='foxy'

# Variable stored in configuration file
ROS2_PATH='/opt/ros/foxy/setup.bash'
ROS_WS_NAME='nanosaur_ws'
DOCKER_TAG='latest'
DOCKER_NETWORK='host'
ROS_DISTRO=$DEFAULT_DISTRO
# Load nanosaur configuration file
if [ -f $NANOSAUR_DATA/.env ] ; then
    source $NANOSAUR_DATA/.env
fi

# Default variable
NANOSAUR_VERSION='1.5.1'
ROBOT_NAME='nanosaur'
NANOSAUR_WORKSPACE=$HOME/$ROS_WS_NAME

bold=`tput bold`
red=`tput setaf 1`
green=`tput setaf 2`
yellow=`tput setaf 3`
blue=`tput setaf 4`
reset=`tput sgr0`

# Load platform
# - aarch64 = NVIDIA Jetson
# - x86_64 = Desktop
PLATFORM="$(uname -m)"

config_info()
{
    echo " - ${bold}ROS2 config folder:${reset} ${green}$NANOSAUR_DATA${reset}" >&2
    echo " - ${bold}Tag:${reset} ${green}$DOCKER_TAG${reset}" >&2
    echo " - ${bold}Network:${reset} ${green}$DOCKER_NETWORK${reset}" >&2
    echo " - ${bold}ROS distro:${reset} ${green}$ROS_DISTRO${reset}" >&2
    if [ ! -z ${ROS_DOMAIN_ID+x} ] ; then
        echo " - ${bold}ROS_DOMAIN_ID:${reset} ${green}$ROS_DOMAIN_ID${reset}" >&2
    fi
}

config_save()
{
    # https://docs.docker.com/compose/compose-file/compose-file-v3/#variable-substitution
    echo "DOCKER_TAG=$DOCKER_TAG" > $NANOSAUR_DATA/.env
    echo "DOCKER_NETWORK=$DOCKER_NETWORK" >> $NANOSAUR_DATA/.env
    echo "ROS_DISTRO=$ROS_DISTRO" >> $NANOSAUR_DATA/.env
    if [ ! -z ${ROS_DOMAIN_ID+x} ] ; then
        echo "ROS_DOMAIN_ID=$ROS_DOMAIN_ID" >> $NANOSAUR_DATA/.env
    fi
}

get_rosinstall()
{
    local branch='master'
    if [ $DOCKER_TAG != 'latest' ] ; then
        branch=$DOCKER_TAG
    fi
    # Load rosinstall configuration
    local ROSINSTALL_FILE="https://raw.githubusercontent.com/rnanosaur/nanosaur/$branch/nanosaur/rosinstall/desktop.rosinstall"
    if [[ $PLATFORM = "aarch64" ]] ; then
        ROSINSTALL_FILE="https://raw.githubusercontent.com/rnanosaur/nanosaur/$branch/nanosaur/rosinstall/robot.rosinstall"
    fi
    echo $ROSINSTALL_FILE
}

# Modules check sudo
# https://serverfault.com/questions/266039/temporarily-increasing-sudos-timeout-for-the-duration-of-an-install-script
sudo_me()
{
    local start=$1
    # write sudo me file
    local sudo_stat="/tmp/nanosaur_sudo_status"
    # No sudo loop
    if $start ; then
        touch $sudo_stat
        # Loop script
        while [ -f $sudo_stat ]; do
            # echo "checking $$ ...$(date)"
            sudo -v
            sleep 5
        done &
    else
        if [ -f $sudo_stat ] ; then
            rm $sudo_stat
        fi
    fi
}

usage()
{
    if [ "$1" != "" ]; then
        echo "${red}$1${reset}" >&2
    fi

    local name=$(basename ${0})
    echo "Robot ROS managager ${bold}v$NANOSAUR_VERSION${reset}. Update workspaces and status." >&2
    if [[ $PLATFORM = "aarch64" ]]; then
        echo "Default nanosaur folder is in ${bold}$NANOSAUR_DATA${reset}" >&2
    fi
    echo "" >&2
    echo "Commands:" >&2
    echo "  $name info                  Status" >&2
    echo "  $name distro [version:$DEFAULT_DISTRO] Select distribution. Use ${bold}reset${reset} to restore" >&2
    echo "  $name domain                Set ROS_DOMAIN_ID" >&2 # https://docs.ros.org/en/ros2_documentation/foxy/Concepts/About-Domain-ID.html
    echo "  $name install  [dev]        Install nanosaur environment. ${bold}dev${reset} enable developer mode" >&2
    if [[ $PLATFORM = "aarch64" ]]; then
        echo "  $name update                Update docker and scripts" >&2
        echo "  $name run    [CMD:bash]     Run a new docker with all device and volumes" >&2
        echo "  $name network [host/bridge] Select network configuration" >&2
        echo "  $name config                Open/create nanosaur.yml in ${bold}$NANOSAUR_DATA/param${reset} (use nano)" >&2
        echo " "  >&2
        echo "  $name wakeup                start nanosaur systems (eq. nanosaur up -d)" >&2
        echo "  $name [start/restart/stop/up/down/logs]  Control nanosaur docker" >&2
    else
        echo "  $name update                Update all robot workspace" >&2
        echo "  $name activate              Load all variables and workspaces for nanosaur" >&2
    fi
}

update_usage()
{
	if [ "$1" != "" ]; then
		echo "${red}$1${reset}" >&2
	fi
	local name=$(basename ${0})
    echo "updater. Update workspace, repositories and dependencies" >&2
    echo "$name update [options]" >&2
    echo "options," >&2
    echo "   -h|--help      | This help" >&2
    if [[ $PLATFORM = "x86_64" ]] ; then
        echo "   rosinstall     | Update rosinstall workspace" >&2
        echo "   build          | build workspace" >&2
    fi
}

update()
{
    local custom=false
    local rosinstall=false
    local build=false
	# Decode all information from startup
    while [ -n "$1" ]; do
        case "$1" in
            -h|--help) # Load help
                update_usage
                exit 0
                ;;
            rosinstall)
                rosinstall=true
                ;;
            build)
                build=true
                ;;
            *)
                update_usage "[ERROR] Unknown option: $1" >&2
                exit 1
                ;;
        esac
            shift 1
    done


    if $rosinstall ; then
        # Request sudo password
        sudo -v
        sudo_me true
    fi

    local branch='master'
    if [ $DOCKER_TAG != 'latest' ] ; then
        branch=$DOCKER_TAG
    fi
    if [ ! -d $NANOSAUR_WORKSPACE ] ; then
        echo " - ${bold}${green}Pull nanosaur command${reset} and copy in $NANOSAUR_DATA" >&2
        curl https://raw.githubusercontent.com/rnanosaur/nanosaur/$branch/nanosaur/scripts/nanosaur -o $NANOSAUR_DATA/nanosaur
        chmod +x $NANOSAUR_DATA/nanosaur
    fi

    if [ -d $NANOSAUR_WORKSPACE/src ] ; then
        # Import workspace
        if [ -d $NANOSAUR_WORKSPACE/src/nanosaur/nanosaur/rosinstall ] ; then
            echo " - ${bold}${green}Check status all workspaces${reset}" >&2
            local rosinstall_name="desktop.rosinstall"
            if [[ $PLATFORM = "aarch64" ]] ; then
                rosinstall_name="robot.rosinstall"
            fi
            vcs import $NANOSAUR_WORKSPACE/src < $NANOSAUR_WORKSPACE/src/nanosaur/nanosaur/rosinstall/$rosinstall_name
        else
            echo " - ${bold}${green}Download and update Nanosaur rosinstall${reset}" >&2
            curl $(get_rosinstall) -o $NANOSAUR_DATA/nanosaur.rosinstall
            vcs import $NANOSAUR_WORKSPACE/src < $NANOSAUR_DATA/nanosaur.rosinstall
            rm $NANOSAUR_DATA/nanosaur.rosinstall
        fi
        # Status update
        if [ $? -ne 0 ] ; then
            # Try to make again
            echo "${red}Please check workspace status ${reset}" >&2
            # sudo_me false
            exit 1
        fi
    fi

    if $rosinstall ; then
        # Load ROS2 workspace
        source $ROS2_PATH
        echo " - ${bold}${green}Update rosdep${reset}" >&2
        # Update rosdep
        rosdep update
        # Install all dependencies
        # http://wiki.ros.org/rosdep
        echo " ${bold}*${reset} Install all ${bold}dependencies${reset}" >&2
        rosdep install --from-paths $NANOSAUR_WORKSPACE/src --ignore-src -r -y
    fi

    if $build ; then
        # Run update function
        local THIS="$(pwd)"
        # Load ROS2 workspace
        source $ROS2_PATH
        # Go to catkin path
        cd $NANOSAUR_WORKSPACE
        # Catkin make all workspace
        echo " ${bold}*${reset} ${green}colcon build${reset} $(basename $NANOSAUR_WORKSPACE)" >&2
        colcon build
        # Return to main path
        cd $THIS
    fi

    # Installer for NVIDIA Jetson platform
    if [[ $PLATFORM = "aarch64" ]] ; then
        # Switch off nanosaur
        docker-compose -f $NANOSAUR_DATA/docker-compose.yml down
        # Update docker-compose
        if [ -d $NANOSAUR_WORKSPACE ] ; then
            if [ ! -L $NANOSAUR_DATA/docker-compose.yml ] ; then
                echo " - ${bold}${green}Link Nanosaur docker-compose${reset}" >&2
                ln -s  $NANOSAUR_WORKSPACE/src/nanosaur/docker-compose.yml $NANOSAUR_DATA/docker-compose.yml
            fi
        else
            # Download latest version nanosaur docker-compose
            echo " - ${bold}${green}Download Nanosaur docker-compose${reset}" >&2
            # Download the docker-compose image and run
            local branch='master'
            if [ $DOCKER_TAG != 'latest' ] ; then
                branch=$DOCKER_TAG
            fi
            curl https://raw.githubusercontent.com/rnanosaur/nanosaur/$branch/docker-compose.yml -o $NANOSAUR_DATA/docker-compose.yml
        fi
        echo " - ${bold}${green}Pull and restart all containers DISTRO: $DOCKER_TAG${reset}" >&2
        # Pull all new images
        docker-compose -f $NANOSAUR_DATA/docker-compose.yml pull
    fi

    if $rosinstall ; then
        # Disable sudo me
        sudo_me false
    fi
}

install_usage()
{
	if [ "$1" != "" ]; then
		echo "${red}$1${reset}"
	fi
	
    echo "${bold}${green}nanosaur installer.${reset} This script install all dependencies. Use this script to setup your host."
    echo "Usage:"
    echo "nanosaur install [options]"
    echo "options,"
    echo "   -h|--help            | This help"
    echo "   -y                   | Run this script silent"
    echo "   dev                  | Install nanosaur in developer mode (install in ${bold}$NANOSAUR_WORKSPACE${reset} workspace)"
}

installer()
{
    local developer=false
    local SILENT=false
	# Decode all information from startup
    while [ -n "$1" ]; do
        case "$1" in
            -h|--help) # Load help
                install_usage
                exit 0
                ;;
            -y)
                SILENT=true
                ;;
            dev)
                developer=true
                ;;
            *)
                install_usage "[ERROR] Unknown option: $1" >&2
                exit 1
                ;;
        esac
            shift 1
    done

    local type_install="desktop"
    if [[ $PLATFORM = "aarch64" ]] ; then
        type_install="robot"
    fi
    local type_developer=""
    # Recap installatation
    echo "------ Configuration ------"
    if $developer ; then
        echo " - ${bold}Developer:${reset} ${yellow}$developer${reset}"
    fi
    echo " - ${bold}Install on:${reset} ${green}$type_install${reset}"
    echo " - ${bold}User:${reset} ${green}$USER${reset} - ${bold}Hostname:${reset} ${green}$HOSTNAME${reset}"
    config_info
    echo "---------------------------"

    while ! $SILENT; do
        read -p "Do you wish to install nanosaur config? [Y/n] " yn
            case $yn in
                [Yy]* ) # Break and install jetson_stats 
                        break;;
                [Nn]* ) exit;;
            * ) echo "Please answer yes or no.";;
        esac
    done

    # curl https://raw.githubusercontent.com/rnanosaur/nanosaur/master/nanosaur/scripts/nanosaur -o $HOME/nanosaur && \
    # chmod +x $HOME/nanosaur && nanosaur install

    # Request sudo password
    sudo -v
    sudo_me true

    if [ ! -d $NANOSAUR_DATA ] ; then
        echo " - ${bold}${green}Make nanosaur folder in $NANOSAUR_DATA${reset}"
        # Build nanosaur folder structure
        # - /opt/nanosaur
        # -      /param [ ros2 parameter folder ]
        sudo mkdir -p $NANOSAUR_DATA
        sudo chown $USER:$USER $NANOSAUR_DATA
        mkdir -p "$NANOSAUR_DATA/param"
    fi

    if $developer || [[ $PLATFORM = "x86_64" ]] ; then

        if ! command -v vcs &> /dev/null ; then
            echo " - Install vcs tool"
            sudo apt update && sudo apt install curl gnupg2 lsb-release -y
            sudo curl -sSL https://raw.githubusercontent.com/ros/rosdistro/master/ros.key  -o /usr/share/keyrings/ros-archive-keyring.gpg
            echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/ros-archive-keyring.gpg] http://packages.ros.org/ros2/ubuntu $(lsb_release -cs) main" | sudo tee /etc/apt/sources.list.d/ros2.list > /dev/null
            sudo apt update && sudo apt-get install python3-vcstool -y
        fi

        if [ ! -d $NANOSAUR_WORKSPACE ] ; then
            echo " - ${bold}${green}Make nanosaur workspace folder in $NANOSAUR_WORKSPACE${reset}"
            mkdir -p $NANOSAUR_WORKSPACE/src 
        fi
        # Download all workspaces
        if [[ $PLATFORM = "x86_64" ]] ; then
            update rosinstall build
        else
            update
        fi
    fi

    # Check if exist the nanosaur workspace
    if [ -d $NANOSAUR_WORKSPACE ] ; then
        if [ -f $NANOSAUR_DATA/nanosaur ] ; then
            rm $NANOSAUR_DATA/nanosaur 
        fi
        if [ ! -L $NANOSAUR_DATA/nanosaur ] ; then
            echo " - Link nanosaur command in ${bold}${green}$NANOSAUR_DATA${reset}"
            ln -s $NANOSAUR_WORKSPACE/src/nanosaur/nanosaur/scripts/nanosaur $NANOSAUR_DATA/nanosaur
        fi
        if [ ! -L $NANOSAUR_DATA/completition.bash ] ; then
            echo " - Link nanosaur completition in ${bold}${green}$NANOSAUR_DATA${reset}"
            ln -s $NANOSAUR_WORKSPACE/src/nanosaur/nanosaur/scripts/completition.bash $NANOSAUR_DATA/completition.bash
        fi
    else
        echo " - ${bold}${green}Move nanosaur command${reset} in $NANOSAUR_DATA"
        mv $HOME/nanosaur $NANOSAUR_DATA/nanosaur
        chmod +x $NANOSAUR_DATA/nanosaur

        echo " - ${bold}${green}Copy nanosaur bash completition${reset} in $NANOSAUR_DATA"
        curl -sSL https://raw.githubusercontent.com/rnanosaur/nanosaur/master/nanosaur/scripts/completition.bash  -o $NANOSAUR_DATA/completition.bash
    fi

    # link nanosaur script to nanosaur path
    if [ ! -L /usr/local/bin/nanosaur ] ; then
        echo " - Link nanosaur command in ${bold}${green}/usr/local/bin${reset}"
        sudo ln -s $NANOSAUR_DATA/nanosaur /usr/local/bin/nanosaur
    fi

    # link nanosaur bash completition
    if [ ! -L /etc/bash_completion.d/nanosaur ] ; then
        echo " - Link nanosaur bash completition in ${bold}${green}/etc/bash_completion.d/${reset}"
        sudo ln -s $NANOSAUR_DATA/completition.bash /etc/bash_completion.d/nanosaur
    fi

    # Installer for NVIDIA Jetson platform
    if [[ $PLATFORM = "aarch64" ]] ; then

        if ! command -v pip3 &> /dev/null ; then
            echo " - ${bold}${green}Install pip/pip3${reset}"
            sudo apt-get install -y python3-pip
        fi

        # Check if is installed nano
        if ! command -v nano &> /dev/null ; then
            echo " - ${bold}${green}Install nano${reset}"
            sudo apt-get install -y nano
        fi

        # Check if is installed jtop
        if ! command -v jtop &> /dev/null ; then
            echo " - ${bold}${green}Install/Update jetson-stats${reset}"
            sudo -H pip3 install -U jetson-stats
        fi

        # Check if is installed ros2_system_manager
        if [ ! -f /usr/lib/ros2_system_manager/system_manager_server ] ; then
            echo " - ${bold}${green}Install/Update ros2_system_manager${reset}"
            sudo -H pip3 install -U ros2-system-manager
        fi

        if ! getent group docker | grep -q "\b$USER\b" ; then
            echo " - Add docker permissions to ${bold}${green}user=$USER${reset}"
            sudo usermod -aG docker $USER
        fi

        # Check if is installed docker-compose
        if ! command -v docker-compose &> /dev/null ; then
            echo " - ${bold}${green}Install docker-compose${reset}"
            sudo apt-get install -y libffi-dev python-openssl libssl-dev
            sudo -H pip3 install -U pip
            sudo pip3 install -U docker-compose
        fi

        if [ -d $NANOSAUR_WORKSPACE ] ; then
            if [ ! -L $NANOSAUR_DATA/docker-compose.yml ] ; then
                echo " - ${bold}${green}Link Nanosaur docker-compose${reset}" >&2
                ln -s  $NANOSAUR_WORKSPACE/src/nanosaur/docker-compose.yml $NANOSAUR_DATA/docker-compose.yml
            fi
        else
            # Download latest version nanosaur docker-compose
            echo " - ${bold}${green}Download Nanosaur docker-compose${reset}" >&2
            # Download the docker-compose image and run
            local branch='master'
            if [ $DOCKER_TAG != 'latest' ] ; then
                branch=$DOCKER_TAG
            fi
            curl https://raw.githubusercontent.com/rnanosaur/nanosaur/$branch/docker-compose.yml -o $NANOSAUR_DATA/docker-compose.yml
        fi

        # Make sure the nvidia docker runtime will be used for builds
        DEFAULT_RUNTIME=$(docker info | grep "Default Runtime: nvidia" ; true)
        if [[ -z "$DEFAULT_RUNTIME" ]]; then
            local branch='master'
            if [ $DOCKER_TAG != 'latest' ] ; then
                branch=$DOCKER_TAG
            fi
            echo "${green} - Download docker daemon.json${reset}"
            curl https://raw.githubusercontent.com/rnanosaur/nanosaur/$branch/nanosaur/scripts/daemon.json -o $NANOSAUR_DATA/daemon.json
            echo "${green} - Set runtime nvidia on /etc/docker/daemon.json${reset}"
            sudo mv /etc/docker/daemon.json /etc/docker/daemon.json.bkp
            sudo cp $NANOSAUR_DATA/daemon.json /etc/docker/daemon.json
            echo "${green} - Restart docker service${reset}"
            sudo systemctl restart docker.service
        fi

        # Create nanosaur docker
        echo " - ${bold}${green}Start nanosaur docker-compose${reset}"
        sudo docker-compose -f $NANOSAUR_DATA/docker-compose.yml up -d
    fi

    # Disable sudo me
    sudo_me false

    if [ -f /var/run/reboot-required ] ; then
        # After install require reboot
        echo "${red}*** System Restart Required ***${reset}"
    fi
}

main()
{
	# Check if run in sudo
    if [[ `id -u` -eq 0 ]] ; then 
        echo "${red}Please don't run as root${reset}" >&2
        exit 1
    fi
    local option=$1
    if [ -z "$option" ] ; then
        usage
        exit 0
    fi
    # Load all arguments except the first one
    local arguments=${@:2}
    # Options
    if [ $option = "help" ] ; then
        usage
        exit 0
    elif [ $option = "install" ] ; then
        installer $arguments
        exit 0
    elif [ $option = "update" ] ; then
        # Update nanosaur
        update $arguments
        exit 0
    elif [ $option = "domain" ] ; then
        # https://docs.ros.org/en/ros2_documentation/foxy/Concepts/About-Domain-ID.html
        if [ ! -z "$arguments" ] ; then
            # Check if is a number
            local re='^[0-9]+$'
            if ! [[ $arguments =~ $re ]] ; then
                echo "${red}error: Not a number${reset}" >&2
                exit 1
            fi
            # Set ROS_DOMAIN_ID
            ROS_DOMAIN_ID=$arguments
            config_save
        fi
        # Read ROS_DOMAIN_ID variable
        local domain=0
        if [ -z ${ROS_DOMAIN_ID+x} ] ; then
            echo "${yellow}Unset variable${reset}"
        else
            domain=$ROS_DOMAIN_ID
        fi
        echo "ROS_DOMAIN_ID=$domain"
        exit 0
    fi
    # Desktop options
    if [ $PLATFORM = "x86_64" ] ; then
        if [ $option = "info" ] ; then
            # Update workspace
            vcs status "$NANOSAUR_WORKSPACE/src"
            echo "${bold}Configuration:${reset}"
            config_info
        elif [ $option = "activate" ] ; then
            echo "${yellow}Please run:${reset}" >&2
            echo "source nanosaur" >&2
        elif [ $option = "distro" ] ; then
            if [ -z "$arguments" ] ; then
                echo "ROS_DISTRO=$DEFAULT_DISTRO"
                exit 0
            fi
        else
            usage "[ERROR] Unknown option: $option" >&2
            exit 1
        fi
    else
        # NVIDIA Jetson options
        if [ $option = "info" ] ; then
            docker-compose -f $NANOSAUR_DATA/docker-compose.yml ps -a
            echo "-------------------------------------------------------------------------" >&2
            echo "${bold}Configuration:${reset}"
            config_info
        elif [ $option = "distro" ] ; then
            if [ -z "$arguments" ] ; then
                echo "ROS_DISTRO=$DEFAULT_DISTRO"
                exit 0
            elif [ "$arguments" = "reset" ] ; then
                DOCKER_TAG="latest"
                ROS_DISTRO=$DEFAULT_DISTRO
                echo "Restore distribution: ${bold}$DOCKER_TAG${reset}" >&2
            else
                DOCKER_TAG=$arguments
                ROS_DISTRO=$arguments
                echo "Distribution: ${bold}$DOCKER_TAG${reset}" >&2
            fi
            # Saving parameters
            config_save
        elif [ $option = "network" ] ; then
            if [ -z "$arguments" ] ; then
                DOCKER_NETWORK="host"
            else
                DOCKER_NETWORK=$arguments
            fi
            echo "Network ${green}nanosaur${reset}: ${bold}$DOCKER_NETWORK${reset}" >&2
            # Saving parameters
            config_save
        elif [ $option = "run" ] ; then
            local docker_cmd="bash"
            if [ ! -z "$arguments" ] ; then
                docker_cmd=$arguments
            fi
            echo "${green}Run a new nanosaur docker${reset}" >&2
            # Print configuration
            echo "${bold}Configuration:${reset}"
            config_info
            # Check volume
            local WORKSPACE_DOCKER=""
            # Check if exist nanosaur workspace on robot folder
            local domain=""
            if [ ! -z ${ROS_DOMAIN_ID+x} ] ; then
                domain="-e ROS_DOMAIN_ID=$ROS_DOMAIN_ID"
            fi
            if [ -d $NANOSAUR_WORKSPACE ] ; then
                echo " - ${bold}Load volume:${reset} ${yellow}$NANOSAUR_WORKSPACE${reset}" >&2
                WORKSPACE_DOCKER="-v $NANOSAUR_WORKSPACE/src:/opt/ros_ws/src/"
            fi
            echo "---------------------------------" >&2
            docker run --runtime nvidia -it --rm --network host \
                        --device /dev/i2c-0 \
                        --device /dev/i2c-1 \
                        --device /dev/input \
                        -v /tmp/argus_socket:/tmp/argus_socket \
                        -v /run/jtop.sock:/run/jtop.sock \
                        -v /run/ros2sm.sock:/run/ros2sm.sock \
                        $domain \
                        $WORKSPACE_DOCKER \
                        nanosaur/nanosaur:$DOCKER_TAG $docker_cmd
        elif [ $option = "config" ] ; then
            nano $NANOSAUR_DATA/param/nanosaur.yml
        elif [ $option = "logs" ] ; then
            docker-compose -f $NANOSAUR_DATA/docker-compose.yml logs $arguments
        elif [ $option = "up" ] ; then
            docker-compose -f $NANOSAUR_DATA/docker-compose.yml up $arguments
        elif [ $option = "start" ] ; then
            docker-compose -f $NANOSAUR_DATA/docker-compose.yml start $arguments
        elif [ $option = "restart" ] ; then
            docker-compose -f $NANOSAUR_DATA/docker-compose.yml restart $arguments
        elif [ $option = "stop" ] ; then
            docker-compose -f $NANOSAUR_DATA/docker-compose.yml stop $arguments
        elif [ $option = "down" ] ; then
            docker-compose -f $NANOSAUR_DATA/docker-compose.yml down $arguments
        elif [ $option = "wakeup" ] ; then
            docker-compose -f $NANOSAUR_DATA/docker-compose.yml up -d
        else
            usage "[ERROR] Unknown option: $option" >&2
            exit 1
        fi
    fi
}


# Detect if is sourced or not
# https://stackoverflow.com/questions/2683279/how-to-detect-if-a-script-is-being-sourced
if [ "${BASH_SOURCE-}" = "$0" ] ; then
    main $@
    exit 0
fi

# Check if is running on Desktop platform
if [ $PLATFORM != "x86_64" ] ; then
    echo "${red}You must source this script only from a Desktop machine${reset}" >&2
    return
fi

deactivate () {

    # https://stackoverflow.com/questions/8760505/is-it-possible-to-unsource-in-bash
    # Restore .bashrc
    if [ ! "${1-}" = "nondestructive" ] ; then
        exec bash
        # Load ROS_DOMAIN_ID
        if [ ! -z ${ROS_DOMAIN_ID+x} ] ; then
            unset ROS_DOMAIN_ID
        fi
    fi

    # The hash command must be called to get it to forget past
    # commands. Without forgetting past commands the $PATH changes
    # we made may not be respected
    hash -r 2>/dev/null

    if ! [ -z "${_OLD_VIRTUAL_PS1+_}" ] ; then
        PS1="$_OLD_VIRTUAL_PS1"
        export PS1
        unset _OLD_VIRTUAL_PS1
    fi

    unset VIRTUAL_ENV
    if [ ! "${1-}" = "nondestructive" ] ; then
    # Self destruct!
        unset -f deactivate
    fi
}

# unset irrelevant variables
deactivate nondestructive

# Check ROS2 workspace and nanosaur workspace
if [ ! -d $(dirname $ROS2_PATH) ] ; then
    echo "${red}ROS2 is not installed in $(dirname $ROS2_PATH)${reset}" >&2
    return
fi
# Load ROS2 workspace
source $ROS2_PATH
# Load ROS_DOMAIN_ID
if [ ! -z ${ROS_DOMAIN_ID+x} ] ; then
    export ROS_DOMAIN_ID=$ROS_DOMAIN_ID
fi

if [ ! -d $NANOSAUR_WORKSPACE/install ] ; then
    echo "${yellow}Nanosaur workspace is missing or not builded check ${bold}$NANOSAUR_WORKSPACE${reset}" >&2
else
    # Load Nanosaur workspace
    source $NANOSAUR_WORKSPACE/install/setup.bash
fi

# Setup PS1
if [ -z "${VIRTUAL_ENV_DISABLE_PROMPT-}" ] ; then
    _OLD_VIRTUAL_PS1="${PS1-}"
    # Rewrite PS1
    PS1="${bold}($ROBOT_NAME)${reset} ${PS1-}"
    if [ ! -z ${ROS_DOMAIN_ID+x} ] ; then
        if [ $ROS_DOMAIN_ID -ne 0 ]; then
            PS1="${bold}${blue}id=$ROS_DOMAIN_ID${reset} ${PS1-}"
        fi
    fi
    export PS1
fi

# The hash command must be called to get it to forget past
# commands. Without forgetting past commands the $PATH changes
# we made may not be respected
hash -r 2>/dev/null
# EOF
